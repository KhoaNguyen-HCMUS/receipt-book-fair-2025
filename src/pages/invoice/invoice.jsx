import { useParams, useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';
import ErrorModal from '../../components/error';
import LoadingModal from '../../components/loading';

const Invoice = () => {
  const { id } = useParams();
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [receiptDetails, setReceiptDetails] = useState({});
  const [errorType, setErrorType] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchReceiptDetails = async () => {
      try {
        const URL = `${import.meta.env.VITE_DOMAIN_BACKUP}${import.meta.env.VITE_API_GET_RECEIPT_BY_ID}${id}`;
        const response = await fetch(URL);
        const result = await response.json();

        if (result.success) {
          setReceiptDetails(result.receipt);
          setBooks(result.orders);
        } else if (!result.success) {
          setErrorType('not_found');
          setLoading(false);
          return;
        } else {
          setErrorType('server_error');
          setLoading(false);
          return;
        }
      } catch {
        setErrorType('server_error');
        setLoading(false);
        return;
      } finally {
        setLoading(false);
      }
    };

    fetchReceiptDetails();
  }, [id]);

  if (errorType === 'not_found') {
    return (
      <ErrorModal
        title='Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n'
        message={`H√≥a ƒë∆°n ${id} kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ x·∫£y ra l·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ h√≥a ƒë∆°n v√† th·ª≠ l·∫°i sau.`}
        icon='üîç'
      />
    );
  }

  if (errorType === 'server_error') {
    return (
      <ErrorModal
        title='L·ªói h·ªá th·ªëng'
        message='ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.'
        icon='‚ö†Ô∏è'
      />
    );
  }

  if (errorType === 'network_error') {
    return (
      <ErrorModal
        title='L·ªói k·∫øt n·ªëi'
        message='Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.'
        icon='üì°'
      />
    );
  }
  if (loading) {
    return <LoadingModal />;
  }

  return (
    <div className='min-h-screen bg-gray-50 p-6'>
      <div className='max-w-4xl mx-auto'>
        <div className='mb-6'>
          <button
            className='bg-green-600 cursor-pointer text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors'
            onClick={() => navigate(-1)}
          >
            ‚Üê Quay l·∫°i
          </button>
        </div>
        <h3 className='text-2xl font-bold text-gray-800 mb-6'>Chi ti·∫øt ƒë∆°n h√†ng {id}</h3>

        {loading ? (
          <p className='text-gray-600'>ƒêang t·∫£i...</p>
        ) : (
          <div className='bg-white rounded-lg shadow-lg p-6 max-h-[80vh] overflow-y-auto'>
            <div className='bg-gray-50 p-4 rounded-lg space-y-3'>
              <div className='flex justify-between'>
                <span className='font-medium text-gray-700'>T√™n Thu Ng√¢n:</span>
                <span className='text-gray-900'>{receiptDetails.name_cashier || 'N/A'}</span>
              </div>

              <div className='flex justify-between'>
                <span className='font-medium text-gray-700'>Th·ªùi gian:</span>
                <span className='text-gray-900'>
                  {receiptDetails.createAt ? receiptDetails.createAt.replace('T', ' ').slice(0, 19) : 'N/A'}
                </span>
              </div>

              <div className='flex justify-between'>
                <span className='font-medium text-gray-700'>Thanh to√°n:</span>
                <span className='text-gray-900'>
                  {receiptDetails.payment_method === 'cash' ? 'Ti·ªÅn m·∫∑t' : 'Chuy·ªÉn kho·∫£n'}
                </span>
              </div>
            </div>

            <div className='overflow-x-auto mb-6'>
              <table className='w-full border-collapse border border-gray-300'>
                <thead>
                  <tr className='bg-gray-100'>
                    <th className='border border-gray-300 px-4 py-2 text-left'>STT</th>
                    <th className='border border-gray-300 px-4 py-2 text-left'>M√£ s√°ch</th>
                    <th className='border border-gray-300 px-4 py-2 text-left'>T√™n s√°ch</th>
                    <th className='border border-gray-300 px-4 py-2 text-center'>S·ªë l∆∞·ª£ng</th>
                    <th className='border border-gray-300 px-4 py-2 text-right'>ƒê∆°n gi√°</th>
                    <th className='border border-gray-300 px-4 py-2 text-right'>Th√†nh ti·ªÅn</th>
                  </tr>
                </thead>
                <tbody>
                  {books.map((book, index) => (
                    <tr key={book.id_product} className='hover:bg-gray-50 cursor-pointer transition-colors'>
                      <td className='border border-gray-300 px-4 py-2 text-center'>{index + 1}</td>
                      <td className='border border-gray-300 px-4 py-2'>{book.id_product}</td>
                      <td className='border border-gray-300 px-4 py-2'>{book.name}</td>
                      <td className='border border-gray-300 px-4 py-2 text-center'>{book.quantity}</td>
                      <td className='border border-gray-300 px-4 py-2 text-right'>
                        {parseFloat(book.price).toLocaleString('vi-VN')} ‚Ç´
                      </td>
                      <td className='border border-gray-300 px-4 py-2 text-right font-semibold'>
                        {(book.quantity * book.price).toLocaleString('vi-VN')} ‚Ç´
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className='bg-gray-50 p-4 rounded-lg space-y-3'>
              <div className='flex justify-between'>
                <span className='font-medium text-gray-700'>T·ªïng ti·ªÅn:</span>
                <span className='text-gray-900'>
                  {Math.floor(receiptDetails.total_amount).toLocaleString('vi-VN')} ‚Ç´
                </span>
              </div>
              <div className='flex justify-between'>
                <span className='font-medium text-gray-700'>Ti·ªÅn gi·∫£m:</span>
                <span className='text-gray-900'>
                  {receiptDetails.voucher ? Math.floor(receiptDetails.voucher).toLocaleString('vi-VN') : 0} ‚Ç´
                </span>
              </div>
              <div className='flex justify-between border-t pt-3'>
                <span className='font-bold text-lg text-gray-800'>Th√†nh ti·ªÅn:</span>
                <span className='font-bold text-lg text-red-600'>
                  {receiptDetails.voucher
                    ? Math.floor(receiptDetails.total_amount - receiptDetails.voucher).toLocaleString('vi-VN')
                    : Math.floor(receiptDetails.total_amount).toLocaleString('vi-VN')}{' '}
                  ‚Ç´
                </span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Invoice;
